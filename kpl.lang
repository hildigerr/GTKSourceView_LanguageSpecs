<?xml version="1.0" encoding="UTF-8"?>
<!-- /usr/share/gtksourceview-2.0/language-specs/kpl.lang -->
<language id="kpl" _name="KPL" version="2.0" _section="Sources">
  <metadata>
    <property name="mimetypes">text/x-kpl</property>
    <property name="globs">*.k</property>
    <property name="line-comment-start">--</property>
    <property name="block-comment-start">/*</property>
    <property name="block-comment-end">*/</property>
  </metadata>

  <styles>
    <style id="comment" _name="Comment" map-to="def:comment"/>
    <style id="string" _name="String" map-to="def:string"/>
    <style id="char" _name="Character" map-to="def:character"/>
    <style id="escaped-character" _name="Escaped Character"   map-to="def:special-char"/>
    <style id="floating-point" _name="Floating point number" map-to="def:floating-point"/>
    <style id="decimal" _name="Decimal number" map-to="def:decimal"/>
    <style id="octal" _name="Octal number" map-to="def:base-n-integer"/>
    <style id="hexadecimal"  _name="Hexadecimal number"  map-to="def:base-n-integer"/>
    <style id="boolean"   _name="Boolean value"   map-to="def:boolean"/>
    <style id="keyword" _name="Keyword" map-to="def:keyword"/>
    <style id="type" _name="Data Type" map-to="def:type"/>
  </styles>

  <definitions>
    <define-regex id="escaped-character" extended="true">
      \\(                   # leading backslash
      [\\\"\'nrbtfav\?] |   # escaped character
      [0-7]{1,3} |          # one, two, or three octal digits
      x[0-9A-Fa-f]+         # 'x' followed by hex digits
      )
    </define-regex>

    <context id="kpl" class="no-spell-check">
      <include>

        <context id="comment" style-ref="comment" end-at-line-end="true" class="comment" class-disabled="no-spell-check">
          <start>--</start>
          <include>
            <context ref="def:in-line-comment"/>
          </include>
        </context>

        <context id="comment-multiline" style-ref="comment" class="comment" class-disabled="no-spell-check">
          <start>/\*</start>
          <end>\*/</end>
          <include>
            <context ref="def:in-comment"/>
          </include>
        </context>

        <context id="string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
          <start>L?"</start>
          <end>"</end>
          <include>
            <context id="escaped-character" style-ref="escaped-character">
              <match>\%{escaped-character}</match>
            </context>
            <context ref="def:line-continue"/>
          </include>
        </context>

        <context id="char" style-ref="char">
          <match>L?'(\%{escaped-character}|.)'</match>
        </context>

        <context id="float" style-ref="floating-point">
          <match extended="true">
            (?&lt;![\w\.])
            ((\.[0-9]+ | [0-9]+\.[0-9]*) ([Ee][+-]?[0-9]*)? |
             ([0-9]+[Ee][+-]?[0-9]*))
            [fFlL]?
            (?![\w\.])
          </match>
        </context>

        <context id="hexadecimal" style-ref="hexadecimal">
          <match extended="true">
            (?&lt;![\w\.])
            0[xX][a-fA-F0-9]+[uUlL]*
            (?![\w\.])
          </match>
        </context>

        <context id="octal" style-ref="octal">
          <match extended="true">
            (?&lt;![\w\.])
            0[0-7]+[uUlL]*
            (?![\w\.])
          </match>
        </context>

        <context id="decimal" style-ref="decimal">
          <match extended="true">
            (?&lt;![\w\.])
            [0-9]+[uUlL]*
            (?![\w\.])
          </match>
        </context>

        <context id="keywords" style-ref="keyword" class="keyword">
          <keyword>self</keyword>
          <keyword>header</keyword>
          <keyword>endHeader</keyword>
          <keyword>uses</keyword>
          <keyword>function</keyword>
          <keyword>endFunction</keyword>
          <keyword>functions</keyword>
          <keyword>code</keyword>
          <keyword>endCode</keyword>
          <keyword>if</keyword>
          <keyword>endIf</keyword>
          <keyword>else</keyword>
          <keyword>elseIf</keyword>
          <keyword>for</keyword>
          <keyword>endFor</keyword>
          <keyword>while</keyword>
          <keyword>endWhile</keyword>
          <keyword>asInteger</keyword>
          <keyword>asPtrTo</keyword>
          <keyword>sizeOf</keyword>
          <keyword>const</keyword>
          <keyword>var</keyword>
          <keyword>type</keyword>
          <keyword>record</keyword>
          <keyword>endRecord</keyword>
          <keyword>errors</keyword>
          <keyword>enum</keyword>
          <keyword>return</keyword>
          <keyword>returns</keyword>
          <keyword>class</keyword>
          <keyword>endClass</keyword>
          <keyword>superclass</keyword>
          <keyword>fields</keyword>
          <keyword>methods</keyword>
          <keyword>interface</keyword>
          <keyword>endInterface</keyword>
          <keyword>messages</keyword>
          <keyword>method</keyword>
          <keyword>endMethod</keyword>
          <keyword>behavior</keyword>
          <keyword>endBehavior</keyword>
          <keyword>do</keyword>
          <keyword>while</keyword>
          <keyword>for</keyword>
          <keyword>endFor</keyword>
          <keyword>to</keyword>
          <keyword>of</keyword>
          <keyword>by</keyword>
          <keyword>break</keyword>
          <keyword>switch</keyword>
          <keyword>case</keyword>
          <keyword>default</keyword>
          <keyword>new</keyword>
          <keyword>alloc</keyword>
          <keyword>arraySize</keyword>
          <keyword>external</keyword>
          <keyword>implements</keyword>
          <keyword>isKindOf</keyword>
          <keyword>isInstanceOf</keyword>
          <keyword>try</keyword>
          <keyword>catch</keyword>
          <keyword>endTry</keyword>
          <keyword>throw</keyword>
          <keyword>true</keyword>
          <keyword>false</keyword>
          <keyword>null</keyword>
        </context>

        <context id="types" style-ref="type" class="type">
          <keyword>array</keyword>
          <keyword>String</keyword>
          <keyword>ptr</keyword>
          <keyword>int</keyword>
          <keyword>char</keyword>
          <keyword>double</keyword>
          <keyword>bool</keyword>
          <keyword>anyType</keyword>
          <keyword>typeOfNull</keyword>
          <keyword>void</keyword>
        </context>

        <context id="boolean" style-ref="boolean" class="boolean">
          <keyword>true</keyword>
          <keyword>false</keyword>
        </context>

      </include>
    </context>
  </definitions>
</language>
